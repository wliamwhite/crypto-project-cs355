{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/CoinCard.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useRef } from 'react';\n// function CoinCard(props) {\n//     const canvasRef = useRef(null);\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n//     const closePrices = (props.history).reverse();\n//     const width = canvas.width;\n//     const height = canvas.height;\n//     const margin = 20;\n//     const chartWidth = width - 2 * margin;\n//     const chartHeight = height - 2 * margin;\n//     // Calculate the maximum and minimum prices\n//     const maxPrice = Math.max(...closePrices);\n//     const minPrice = Math.min(...closePrices);\n//     // Function to convert price to Y coordinate\n//     function getPriceY(price) {\n//       return chartHeight - ((price - minPrice) / (maxPrice - minPrice)) * chartHeight + margin;\n//     }\n//     // Clear the canvas\n//     ctx.clearRect(0, 0, width, height);\n//     // Draw X and Y axis\n//     ctx.beginPath();\n//     ctx.moveTo(margin, margin);\n//     ctx.lineTo(margin, height - margin);\n//     ctx.lineTo(width - margin, height - margin);\n//     ctx.stroke();\n//     // Draw the line chart\n//     ctx.beginPath();\n//     ctx.strokeStyle = '#007bff';\n//     ctx.lineWidth = 2;\n//     closePrices.forEach((price, index) => {\n//       const x = margin + (index / (closePrices.length - 1)) * chartWidth;\n//       const y = getPriceY(price);\n//       if (index === 0) {\n//         ctx.moveTo(x, y);\n//       } else {\n//         ctx.lineTo(x, y);\n//       }\n//     });\n//     ctx.stroke();\n//   }, [props.history]);\n//   return (<div class=\"individualCoin\"><p id=\"coinName\">{props.coin}</p><h1 id=\"coinPrice\">Current Price: ${props.price}</h1><br/><canvas ref={canvasRef} width={800} height={400}></canvas></div>); \n// }\n// export default CoinCard;\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CoinCard(props) {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const closePrices = props.history;\n    const width = canvas.width;\n    const height = canvas.height;\n    const margin = 20;\n    const chartWidth = width - 2 * margin;\n    const chartHeight = height - 2 * margin; // Calculate the maximum and minimum prices\n\n    const maxPrice = Math.max(...closePrices);\n    const minPrice = Math.min(...closePrices); // Function to convert price to Y coordinate\n\n    function getPriceY(price) {\n      return chartHeight - (price - minPrice) / (maxPrice - minPrice) * chartHeight + margin;\n    } // Clear the canvas\n\n\n    ctx.clearRect(0, 0, width, height); // Draw X and Y axis\n\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(margin, height - margin);\n    ctx.lineTo(width - margin, height - margin);\n    ctx.stroke(); // Draw the line chart\n\n    ctx.beginPath();\n    ctx.strokeStyle = '#007bff';\n    ctx.lineWidth = 2;\n    closePrices.forEach((price, index) => {\n      const x = margin + index / (closePrices.length - 1) * chartWidth;\n      const y = getPriceY(price);\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n    ctx.stroke();\n  }, [props.history]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"individualCoin\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"coinName\",\n      children: props.coin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 39\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"coinPrice\",\n      children: [\"Current Price: $\", props.price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 72\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 125\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 130\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 11\n  }, this);\n}\n\n_s(CoinCard, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = CoinCard;\nexport default CoinCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinCard\");","map":{"version":3,"sources":["/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/CoinCard.jsx"],"names":["React","useEffect","useRef","CoinCard","props","canvasRef","canvas","current","ctx","getContext","closePrices","history","width","height","margin","chartWidth","chartHeight","maxPrice","Math","max","minPrice","min","getPriceY","price","clearRect","beginPath","moveTo","lineTo","stroke","strokeStyle","lineWidth","forEach","index","x","length","y","coin"],"mappings":"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","sourcesContent":["// import React, { useEffect, useRef } from 'react';\n\n// function CoinCard(props) {\n\n\n//     const canvasRef = useRef(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext('2d');\n\n//     const closePrices = (props.history).reverse();\n\n//     const width = canvas.width;\n//     const height = canvas.height;\n//     const margin = 20;\n//     const chartWidth = width - 2 * margin;\n//     const chartHeight = height - 2 * margin;\n\n//     // Calculate the maximum and minimum prices\n//     const maxPrice = Math.max(...closePrices);\n//     const minPrice = Math.min(...closePrices);\n\n//     // Function to convert price to Y coordinate\n//     function getPriceY(price) {\n//       return chartHeight - ((price - minPrice) / (maxPrice - minPrice)) * chartHeight + margin;\n//     }\n\n//     // Clear the canvas\n//     ctx.clearRect(0, 0, width, height);\n\n//     // Draw X and Y axis\n//     ctx.beginPath();\n//     ctx.moveTo(margin, margin);\n//     ctx.lineTo(margin, height - margin);\n//     ctx.lineTo(width - margin, height - margin);\n//     ctx.stroke();\n\n//     // Draw the line chart\n//     ctx.beginPath();\n//     ctx.strokeStyle = '#007bff';\n//     ctx.lineWidth = 2;\n//     closePrices.forEach((price, index) => {\n//       const x = margin + (index / (closePrices.length - 1)) * chartWidth;\n//       const y = getPriceY(price);\n//       if (index === 0) {\n//         ctx.moveTo(x, y);\n//       } else {\n//         ctx.lineTo(x, y);\n//       }\n//     });\n//     ctx.stroke();\n//   }, [props.history]);\n\n//   return (<div class=\"individualCoin\"><p id=\"coinName\">{props.coin}</p><h1 id=\"coinPrice\">Current Price: ${props.price}</h1><br/><canvas ref={canvasRef} width={800} height={400}></canvas></div>); \n// }\n\n// export default CoinCard;\n\nimport React, { useEffect, useRef } from 'react';\n\n \n\nfunction CoinCard(props) {\n\n    const canvasRef = useRef(null);\n\n \n\n  useEffect(() => {\n\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n\n    const closePrices = props.history;\n\n \n\n    const width = canvas.width;\n\n    const height = canvas.height;\n\n    const margin = 20;\n\n    const chartWidth = width - 2 * margin;\n\n    const chartHeight = height - 2 * margin;\n\n \n\n    // Calculate the maximum and minimum prices\n\n    const maxPrice = Math.max(...closePrices);\n\n    const minPrice = Math.min(...closePrices);\n\n \n\n    // Function to convert price to Y coordinate\n\n    function getPriceY(price) {\n\n      return chartHeight - ((price - minPrice) / (maxPrice - minPrice)) * chartHeight + margin;\n\n    }\n\n \n\n    // Clear the canvas\n\n    ctx.clearRect(0, 0, width, height);\n\n \n\n    // Draw X and Y axis\n\n    ctx.beginPath();\n\n    ctx.moveTo(margin, margin);\n\n    ctx.lineTo(margin, height - margin);\n\n    ctx.lineTo(width - margin, height - margin);\n\n    ctx.stroke();\n\n \n\n    // Draw the line chart\n\n    ctx.beginPath();\n\n    ctx.strokeStyle = '#007bff';\n\n    ctx.lineWidth = 2;\n\n    closePrices.forEach((price, index) => {\n\n      const x = margin + (index / (closePrices.length - 1)) * chartWidth;\n\n      const y = getPriceY(price);\n\n      if (index === 0) {\n\n        ctx.moveTo(x, y);\n\n      } else {\n\n        ctx.lineTo(x, y);\n\n      }\n\n    });\n    ctx.stroke();\n  }, [props.history]);\n\n \n\n  return (<div class=\"individualCoin\"><p id=\"coinName\">{props.coin}</p><h1 id=\"coinPrice\">Current Price: ${props.price}</h1><br/><canvas ref={canvasRef} width={800} height={400}></canvas></div>);\n\n}\n\n \n\nexport default CoinCard;"]},"metadata":{},"sourceType":"module"}