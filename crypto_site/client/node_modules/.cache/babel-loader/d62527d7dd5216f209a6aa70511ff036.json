{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/CoinCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CoinCard(props) {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [showChart, setShowChart] = useState(true);\n  useEffect(() => {\n    if (showChart) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const closePrices = props.history.reverse();\n      const width = canvas.width;\n      const height = canvas.height;\n      const margin = 20;\n      const chartWidth = width - 2 * margin;\n      const chartHeight = height - 2 * margin; // Calculate the maximum and minimum prices\n\n      const maxPrice = Math.max(...closePrices);\n      const minPrice = Math.min(...closePrices); // Function to convert price to Y coordinate\n\n      function getPriceY(price) {\n        return chartHeight - (price - minPrice) / (maxPrice - minPrice) * chartHeight + margin;\n      } // Clear the canvas\n\n\n      ctx.clearRect(0, 0, width, height); // Draw X and Y axis\n\n      ctx.beginPath();\n      ctx.moveTo(margin, margin);\n      ctx.lineTo(margin, height - margin);\n      ctx.lineTo(width - margin, height - margin);\n      ctx.stroke(); // Draw the line chart\n\n      ctx.beginPath();\n      ctx.strokeStyle = '#007bff';\n      ctx.lineWidth = 2;\n      closePrices.forEach((price, index) => {\n        const x = margin + index / (closePrices.length - 1) * chartWidth;\n        const y = getPriceY(price);\n\n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.stroke();\n    }\n  }, [props.history, showChart]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"individualCoin\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"coinName\",\n      children: props.coin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"coinPrice\",\n      children: [\"Current Price: $\", props.price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), showChart && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"toggleChartButton\",\n        onClick: () => setShowChart(!showChart),\n        children: showChart ? 'Hide Chart' : 'Show Chart'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinCard, \"GVI9FCYCUuZ1GJuapr4HBI8JbGs=\");\n\n_c = CoinCard;\nexport default CoinCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinCard\");","map":{"version":3,"sources":["/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/CoinCard.jsx"],"names":["React","useEffect","useRef","useState","CoinCard","props","canvasRef","showChart","setShowChart","canvas","current","ctx","getContext","closePrices","history","reverse","width","height","margin","chartWidth","chartHeight","maxPrice","Math","max","minPrice","min","getPriceY","price","clearRect","beginPath","moveTo","lineTo","stroke","strokeStyle","lineWidth","forEach","index","x","length","y","coin","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nfunction CoinCard(props) {\n  const canvasRef = useRef(null);\n  const [showChart, setShowChart] = useState(true);\n\n  useEffect(() => {\n    if (showChart) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      const closePrices = (props.history).reverse();\n\n      const width = canvas.width;\n      const height = canvas.height;\n      const margin = 20;\n      const chartWidth = width - 2 * margin;\n      const chartHeight = height - 2 * margin;\n\n      // Calculate the maximum and minimum prices\n      const maxPrice = Math.max(...closePrices);\n      const minPrice = Math.min(...closePrices);\n\n      // Function to convert price to Y coordinate\n      function getPriceY(price) {\n        return chartHeight - ((price - minPrice) / (maxPrice - minPrice)) * chartHeight + margin;\n      }\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, width, height);\n\n      // Draw X and Y axis\n      ctx.beginPath();\n      ctx.moveTo(margin, margin);\n      ctx.lineTo(margin, height - margin);\n      ctx.lineTo(width - margin, height - margin);\n      ctx.stroke();\n\n      // Draw the line chart\n      ctx.beginPath();\n      ctx.strokeStyle = '#007bff';\n      ctx.lineWidth = 2;\n      closePrices.forEach((price, index) => {\n        const x = margin + (index / (closePrices.length - 1)) * chartWidth;\n        const y = getPriceY(price);\n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.stroke();\n    }\n  }, [props.history, showChart]);\n\n  return (\n    <div className=\"individualCoin\">\n      <p id=\"coinName\">{props.coin}</p>\n      <h1 id=\"coinPrice\">Current Price: ${props.price}</h1>\n      {showChart && <canvas ref={canvasRef} width={800} height={400}></canvas>}\n      <div style={{ textAlign: 'center' }}>\n        <button\n          id=\"toggleChartButton\"\n          onClick={() => setShowChart(!showChart)}\n        >\n          {showChart ? 'Hide Chart' : 'Show Chart'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default CoinCard;"]},"metadata":{},"sourceType":"module"}