{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/index.js\";\nconst server = new WebSocket('ws://localhost:8080'); // const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx'; // easily identify input and button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst input = document.getElementById('message');\nconst send = document.getElementById('send');\nconst interval = document.getElementById('interval'); // to store subscribed datafeeds client-side\n\nlet topicList = []; // only enable button AFTER websocket connection hasbeen established\n\nsend.disabled = true; // do stuff on click\n\nsend.addEventListener('click', () => {\n  const coin = input.value;\n  const timeframe = interval.value;\n  let newCoin = true;\n  let newInterval = true;\n\n  for (let element of topicList) {\n    if (element.ticker == coin) {\n      newCoin = false;\n\n      if (element.interval == timeframe) {\n        newInterval = false;\n      } else {\n        element.interval = timeframe;\n      }\n    }\n  }\n\n  if (newCoin) {\n    topicList.push({\n      ticker: coin,\n      interval: timeframe\n    });\n    sendMessage(topicList);\n  } else if (newInterval) {\n    sendMessage(topicList);\n  }\n}); // send message when 'enter' is clicked\n\ndocument.addEventListener('keyup', e => {\n  const coin = input.value;\n  const timeframe = interval.value;\n  let newCoin = true;\n  let newInterval = true;\n\n  for (let element of topicList) {\n    if (element.ticker == coin) {\n      newCoin = false;\n\n      if (element.interval == timeframe) {\n        newInterval = false;\n      } else {\n        element.interval = timeframe;\n      }\n    }\n  }\n\n  if (newCoin) {\n    topicList.push({\n      ticker: coin,\n      interval: timeframe\n    });\n    sendMessage(topicList);\n  } else if (newInterval) {\n    sendMessage(topicList);\n  }\n}); // enable the button upon websocket connection\n\nserver.onopen = () => {\n  send.disabled = false;\n};\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\n\nserver.onmessage = event => {\n  console.log(\"reached onmessage\");\n  let message = JSON.parse(event.data);\n  console.log(message);\n\n  for (let t of message) {\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(App, {\n        coin: t.ticker.ticker,\n        price: t.ticker.price,\n        history: t.history\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), document.getElementById('root'));\n  }\n}; // TODO: abstract & export, make topicList a tuple (no duplicates)\n// function to be called when sending a message\n\n\nfunction sendMessage(topicList) {\n  const toServer = {\n    tickers: topicList\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;","map":{"version":3,"sources":["/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/index.js"],"names":["server","WebSocket","React","ReactDOM","App","input","document","getElementById","send","interval","topicList","disabled","addEventListener","coin","value","timeframe","newCoin","newInterval","element","ticker","push","sendMessage","e","onopen","onmessage","event","console","log","message","JSON","parse","data","t","render","price","history","toServer","tickers","stringify"],"mappings":"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","sourcesContent":["const server = new WebSocket('ws://localhost:8080');\n// const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\nimport React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App.jsx';\n\n// easily identify input and button\nconst input = document.getElementById('message');\nconst send = document.getElementById('send');\nconst interval = document.getElementById('interval');\n\n// to store subscribed datafeeds client-side\nlet topicList = [];\n\n// only enable button AFTER websocket connection hasbeen established\nsend.disabled = true;\n\n// do stuff on click\nsend.addEventListener('click', () => {\n    const coin = input.value;\n    const timeframe = interval.value;\n    let newCoin = true;\n    let newInterval = true;\n    for(let element of topicList){\n        if(element.ticker == coin){\n            newCoin = false;\n            if(element.interval == timeframe){\n                newInterval = false;\n            } else {\n                element.interval = timeframe;\n            }\n        }\n    }\n\n    if(newCoin){\n        topicList.push({\n            ticker: coin,\n            interval: timeframe\n        });\n        sendMessage(topicList);\n    } else if (newInterval){\n        sendMessage(topicList);\n    }\n});\n\n// send message when 'enter' is clicked\ndocument.addEventListener('keyup', e => {\n    const coin = input.value;\n    const timeframe = interval.value;\n    let newCoin = true;\n    let newInterval = true;\n    for(let element of topicList){\n        if(element.ticker == coin){\n            newCoin = false;\n            if(element.interval == timeframe){\n                newInterval = false;\n            } else {\n                element.interval = timeframe;\n            }\n        }\n    }\n\n    if(newCoin){\n        topicList.push({\n            ticker: coin,\n            interval: timeframe\n        });\n        sendMessage(topicList);\n    } else if (newInterval){\n        sendMessage(topicList);\n    }\n});\n\n// enable the button upon websocket connection\nserver.onopen = () => {\n    send.disabled = false;\n};\n\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\nserver.onmessage = event => {\n    console.log(\"reached onmessage\");\n    let message = JSON.parse(event.data);\n    console.log(message);\n    for(let t of message){\n        ReactDOM.render(\n            <div>\n            <App\n                coin={t.ticker.ticker}\n                price={t.ticker.price}\n                history={t.history}\n            />\n            </div>,\n        document.getElementById('root'))\n    }\n    \n};\n\n\n\n\n// TODO: abstract & export, make topicList a tuple (no duplicates)\n// function to be called when sending a message\nfunction sendMessage(topicList){\n    const toServer = {\n        tickers: topicList\n    };\n    server.send(JSON.stringify(toServer));\n};\n\n"]},"metadata":{},"sourceType":"module"}