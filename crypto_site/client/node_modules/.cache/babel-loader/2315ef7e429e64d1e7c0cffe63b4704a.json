{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/Chart.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(props) {\n  const canvas = document.getElementById('lineChart');\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n  const margin = 20;\n  const chartWidth = width - 2 * margin;\n  const chartHeight = height - 2 * margin; // Calculate the maximum and minimum prices\n\n  const maxPrice = Math.max(props.history);\n  const minPrice = Math.min(props.history); // Function to convert price to Y coordinate\n\n  function getPriceY(price) {\n    return chartHeight - (price - minPrice) / (maxPrice - minPrice) * chartHeight + margin;\n  } // Clear the canvas\n\n\n  ctx.clearRect(0, 0, width, height); // Draw X and Y axis\n\n  ctx.beginPath();\n  ctx.moveTo(margin, margin);\n  ctx.lineTo(margin, height - margin);\n  ctx.lineTo(width - margin, height - margin);\n  ctx.stroke(); // Draw the line chart\n\n  ctx.beginPath();\n  ctx.strokeStyle = '#007bff';\n  ctx.lineWidth = 2;\n  props.history.forEach((price, index) => {\n    const x = margin + index / (closePrices.length - 1) * chartWidth;\n    const y = getPriceY(price);\n\n    if (index === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  });\n  ctx.stroke();\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"lineChart\",\n    width: \"800\",\n    height: \"400\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/components/Chart.jsx"],"names":["React","Chart","props","canvas","document","getElementById","ctx","getContext","width","height","margin","chartWidth","chartHeight","maxPrice","Math","max","history","minPrice","min","getPriceY","price","clearRect","beginPath","moveTo","lineTo","stroke","strokeStyle","lineWidth","forEach","index","x","closePrices","length","y"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAf;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAMC,KAAK,GAAGL,MAAM,CAACK,KAArB;AACA,QAAMC,MAAM,GAAGN,MAAM,CAACM,MAAtB;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,UAAU,GAAGH,KAAK,GAAG,IAAIE,MAA/B;AACA,QAAME,WAAW,GAAGH,MAAM,GAAG,IAAIC,MAAjC,CARkB,CAUlB;;AACA,QAAMG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,CAACc,OAAf,CAAjB;AACA,QAAMC,QAAQ,GAAGH,IAAI,CAACI,GAAL,CAAShB,KAAK,CAACc,OAAf,CAAjB,CAZkB,CAclB;;AACA,WAASG,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAOR,WAAW,GAAI,CAACQ,KAAK,GAAGH,QAAT,KAAsBJ,QAAQ,GAAGI,QAAjC,CAAD,GAA+CL,WAA7D,GAA2EF,MAAlF;AACH,GAjBiB,CAmBlB;;;AACAJ,EAAAA,GAAG,CAACe,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBb,KAApB,EAA2BC,MAA3B,EApBkB,CAsBlB;;AACAH,EAAAA,GAAG,CAACgB,SAAJ;AACAhB,EAAAA,GAAG,CAACiB,MAAJ,CAAWb,MAAX,EAAmBA,MAAnB;AACAJ,EAAAA,GAAG,CAACkB,MAAJ,CAAWd,MAAX,EAAmBD,MAAM,GAAGC,MAA5B;AACAJ,EAAAA,GAAG,CAACkB,MAAJ,CAAWhB,KAAK,GAAGE,MAAnB,EAA2BD,MAAM,GAAGC,MAApC;AACAJ,EAAAA,GAAG,CAACmB,MAAJ,GA3BkB,CA6BlB;;AACAnB,EAAAA,GAAG,CAACgB,SAAJ;AACAhB,EAAAA,GAAG,CAACoB,WAAJ,GAAkB,SAAlB;AACApB,EAAAA,GAAG,CAACqB,SAAJ,GAAgB,CAAhB;AACAzB,EAAAA,KAAK,CAACc,OAAN,CAAcY,OAAd,CAAsB,CAACR,KAAD,EAAQS,KAAR,KAAkB;AACxC,UAAMC,CAAC,GAAGpB,MAAM,GAAImB,KAAK,IAAIE,WAAW,CAACC,MAAZ,GAAqB,CAAzB,CAAN,GAAqCrB,UAAxD;AACA,UAAMsB,CAAC,GAAGd,SAAS,CAACC,KAAD,CAAnB;;AACA,QAAIS,KAAK,KAAK,CAAd,EAAiB;AACbvB,MAAAA,GAAG,CAACiB,MAAJ,CAAWO,CAAX,EAAcG,CAAd;AACH,KAFD,MAEO;AACH3B,MAAAA,GAAG,CAACkB,MAAJ,CAAWM,CAAX,EAAcG,CAAd;AACH;AACA,GARD;AASA3B,EAAAA,GAAG,CAACmB,MAAJ;AACA,sBAAO;AAAQ,IAAA,EAAE,EAAC,WAAX;AAAuB,IAAA,KAAK,EAAC,KAA7B;AAAmC,IAAA,MAAM,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;KA5CQxB,K;AA8CT,eAAeA,KAAf","sourcesContent":["import React from 'react';\n\nfunction Chart(props) {\n    const canvas = document.getElementById('lineChart');\n    const ctx = canvas.getContext('2d');\n\n    const width = canvas.width;\n    const height = canvas.height;\n    const margin = 20;\n    const chartWidth = width - 2 * margin;\n    const chartHeight = height - 2 * margin;\n\n    // Calculate the maximum and minimum prices\n    const maxPrice = Math.max(props.history);\n    const minPrice = Math.min(props.history);\n\n    // Function to convert price to Y coordinate\n    function getPriceY(price) {\n        return chartHeight - ((price - minPrice) / (maxPrice - minPrice)) * chartHeight + margin;\n    }\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw X and Y axis\n    ctx.beginPath();\n    ctx.moveTo(margin, margin);\n    ctx.lineTo(margin, height - margin);\n    ctx.lineTo(width - margin, height - margin);\n    ctx.stroke();\n\n    // Draw the line chart\n    ctx.beginPath();\n    ctx.strokeStyle = '#007bff';\n    ctx.lineWidth = 2;\n    props.history.forEach((price, index) => {\n    const x = margin + (index / (closePrices.length - 1)) * chartWidth;\n    const y = getPriceY(price);\n    if (index === 0) {\n        ctx.moveTo(x, y);\n    } else {\n        ctx.lineTo(x, y);\n    }\n    });\n    ctx.stroke();\n    return <canvas id=\"lineChart\" width=\"800\" height=\"400\"></canvas>\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}