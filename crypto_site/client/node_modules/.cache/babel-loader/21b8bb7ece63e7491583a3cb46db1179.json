{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/Documents/projects/node/websocket/client/src/index.js\";\n// const server = new WebSocket('ws://localhost:8080');\nconst server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev');\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\nimport { createTickerInfo } from './workers/dataTransform.js'; // easily identify input and button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst input = document.getElementById('message');\nconst button = document.getElementById('send');\nconst endDatafeed = document.getElementById('end'); // only enable button AFTER websocket connection hasbeen established\n\nbutton.disabled = true; // do stuff on click\n\nbutton.addEventListener('click', sendMessage, false);\nendDatafeed.addEventListener('click', endSession, false); // send message when 'enter' is clicked\n\ndocument.addEventListener('keyup', e => {\n  if (e.key === 'Enter') {\n    sendMessage();\n  }\n}); // enable the button upon websocket connection\n\nserver.onopen = () => {\n  button.disabled = false;\n};\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component \n*/\n\n\nserver.onmessage = event => {\n  let tickerInfo = createTickerInfo(event.data);\n  let message = JSON.parse(event.data);\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(App, {\n      coin: tickerInfo.ticker,\n      price: tickerInfo.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(App, {\n      coin: message.message,\n      price: message.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this), document.getElementById('root'));\n}; // function to be called when sending a message\n\n\nfunction sendMessage() {\n  const toServer = {\n    action: 'establishKucoinWebsocket',\n    ticker: input.value\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;\n\nfunction endSession() {\n  server.send('endAllSessions');\n}\n\n;","map":{"version":3,"sources":["/Users/liamwhite/Documents/projects/node/websocket/client/src/index.js"],"names":["server","WebSocket","React","ReactDOM","App","createTickerInfo","input","document","getElementById","button","endDatafeed","disabled","addEventListener","sendMessage","endSession","e","key","onopen","onmessage","event","tickerInfo","data","message","JSON","parse","render","ticker","price","toServer","action","value","send","stringify"],"mappings":";AAAA;AACA,MAAMA,MAAM,GAAG,IAAIC,SAAJ,CAAc,0DAAd,CAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,gBAAT,QAAiC,4BAAjC,C,CAEA;;;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACA,MAAMC,MAAM,GAAGF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAf;AACA,MAAME,WAAW,GAAGH,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAApB,C,CAEA;;AACAC,MAAM,CAACE,QAAP,GAAkB,IAAlB,C,CACA;;AACAF,MAAM,CAACG,gBAAP,CAAwB,OAAxB,EAAiCC,WAAjC,EAA8C,KAA9C;AACAH,WAAW,CAACE,gBAAZ,CAA6B,OAA7B,EAAsCE,UAAtC,EAAkD,KAAlD,E,CACA;;AACAP,QAAQ,CAACK,gBAAT,CAA0B,OAA1B,EAAmCG,CAAC,IAAI;AACpC,MAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAqB;AACjBH,IAAAA,WAAW;AACd;AACJ,CAJD,E,CAMA;;AACAb,MAAM,CAACiB,MAAP,GAAgB,MAAM;AAClBR,EAAAA,MAAM,CAACE,QAAP,GAAkB,KAAlB;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AAEAX,MAAM,CAACkB,SAAP,GAAmBC,KAAK,IAAI;AACxB,MAAIC,UAAU,GAAGf,gBAAgB,CAACc,KAAK,CAACE,IAAP,CAAjC;AACA,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACE,IAAjB,CAAd;AACAlB,EAAAA,QAAQ,CAACsB,MAAT,eACA;AAAA,4BACA,QAAC,GAAD;AACI,MAAA,IAAI,EAAEL,UAAU,CAACM,MADrB;AAEI,MAAA,KAAK,EAAEN,UAAU,CAACO;AAFtB;AAAA;AAAA;AAAA;AAAA,YADA,eAKA,QAAC,GAAD;AACI,MAAA,IAAI,EAAEL,OAAO,CAACA,OADlB;AAEI,MAAA,KAAK,EAAEA,OAAO,CAACK;AAFnB;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAWApB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAXA;AAYH,CAfD,C,CAiBA;;;AACA,SAASK,WAAT,GAAsB;AAClB,QAAMe,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAE,0BADK;AAEbH,IAAAA,MAAM,EAAEpB,KAAK,CAACwB;AAFD,GAAjB;AAIA9B,EAAAA,MAAM,CAAC+B,IAAP,CAAYR,IAAI,CAACS,SAAL,CAAeJ,QAAf,CAAZ;AACH;;AAAA;;AAED,SAASd,UAAT,GAAsB;AAClBd,EAAAA,MAAM,CAAC+B,IAAP,CAAY,gBAAZ;AACH;;AAAA","sourcesContent":["// const server = new WebSocket('ws://localhost:8080');\nconst server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\nimport React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App.jsx';\nimport { createTickerInfo } from './workers/dataTransform.js'\n\n// easily identify input and button\nconst input = document.getElementById('message')\nconst button = document.getElementById('send')\nconst endDatafeed = document.getElementById('end')\n\n// only enable button AFTER websocket connection hasbeen established\nbutton.disabled = true;\n// do stuff on click\nbutton.addEventListener('click', sendMessage, false);\nendDatafeed.addEventListener('click', endSession, false);\n// send message when 'enter' is clicked\ndocument.addEventListener('keyup', e => {\n    if(e.key === 'Enter'){\n        sendMessage()\n    }\n})\n\n// enable the button upon websocket connection\nserver.onopen = () => {\n    button.disabled = false;\n};\n\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component \n*/\n\nserver.onmessage = event => {\n    let tickerInfo = createTickerInfo(event.data)\n    let message = JSON.parse(event.data);\n    ReactDOM.render(\n    <div>\n    <App\n        coin={tickerInfo.ticker}\n        price={tickerInfo.price}\n    />\n    <App\n        coin={message.message}\n        price={message.price}\n    />\n    </div>,\n    document.getElementById('root'))\n};\n\n// function to be called when sending a message\nfunction sendMessage(){\n    const toServer = {\n        action: 'establishKucoinWebsocket',\n        ticker: input.value\n    };\n    server.send(JSON.stringify(toServer));\n};\n\nfunction endSession() {\n    server.send('endAllSessions');\n};"]},"metadata":{},"sourceType":"module"}