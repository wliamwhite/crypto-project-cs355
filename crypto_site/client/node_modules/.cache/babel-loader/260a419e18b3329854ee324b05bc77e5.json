{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/index.js\";\nconst server = new WebSocket('ws://localhost:8080'); // const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx'; // easily identify input and button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst input = document.getElementById('message');\nconst send = document.getElementById('send');\nconst interval = document.getElementById('interval');\nvar unixTime = Math.floor(Date.now() / 1000); // to store subscribed datafeeds client-side\n\nlet topicList = []; // only enable button AFTER websocket connection hasbeen established\n\nsend.disabled = true; // do stuff on click\n\nsend.addEventListener('click', () => {\n  const coin = input.value;\n  const type = interval.value;\n  topicList.push(input.value);\n  sendMessage(topicList);\n  requestBulkPriceHistory(coin, type);\n}); // send message when 'enter' is clicked\n\ndocument.addEventListener('keyup', e => {\n  if (e.key === 'Enter') {\n    const coin = input.value;\n    const type = interval.value;\n    topicList.push({\n      ticker: coin,\n      interval: type\n    });\n    sendMessage(topicList);\n  }\n}); // enable the button upon websocket connection\n\nserver.onopen = () => {\n  send.disabled = false;\n};\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\n\nserver.onmessage = event => {\n  console.log(\"reached onmessage\");\n  let message = JSON.parse(event.data);\n  console.log(message);\n  console.log(message.data);\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      coin: message.ticker,\n      price: message.price,\n      history: message.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this), document.getElementById('root'));\n}; // TODO: abstract & export, make topicList a tuple (no duplicates)\n// function to be called when sending a message\n\n\nfunction sendMessage(topicList) {\n  const toServer = {\n    action: 'establishKucoinWebsocket',\n    tickers: topicList\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;\n\nfunction requestBulkPriceHistory(coin, interval) {\n  const toServer = {\n    action: 'bulkPriceHistory',\n    ticker: coin,\n    start: unixTime,\n    end: unixTime,\n    type: interval\n  };\n  server.send(JSON.stringify(toServer));\n}\n\nfunction endSession() {\n  const toServer = {\n    action: 'endAllSessions',\n    tickers: topicList\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;","map":{"version":3,"sources":["/Users/liamwhite/proj/node/websocket/crypto-project-cs355/crypto_site/client/src/index.js"],"names":["server","WebSocket","React","ReactDOM","App","input","document","getElementById","send","interval","unixTime","Math","floor","Date","now","topicList","disabled","addEventListener","coin","value","type","push","sendMessage","requestBulkPriceHistory","e","key","ticker","onopen","onmessage","event","console","log","message","JSON","parse","data","render","price","toServer","action","tickers","stringify","start","end","endSession"],"mappings":"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","sourcesContent":["const server = new WebSocket('ws://localhost:8080');\n// const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\nimport React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App.jsx';\n\n// easily identify input and button\nconst input = document.getElementById('message');\nconst send = document.getElementById('send');\nconst interval = document.getElementById('interval');\n\nvar unixTime = Math.floor(Date.now() / 1000);\n\n// to store subscribed datafeeds client-side\nlet topicList = [];\n\n// only enable button AFTER websocket connection hasbeen established\nsend.disabled = true;\n\n// do stuff on click\nsend.addEventListener('click', () => {\n    const coin = input.value;\n    const type = interval.value;\n    topicList.push(input.value);\n    sendMessage(topicList);\n    requestBulkPriceHistory(coin, type);\n});\n\n// send message when 'enter' is clicked\ndocument.addEventListener('keyup', e => {\n    if(e.key === 'Enter'){\n        const coin = input.value;\n        const type = interval.value;\n        topicList.push({\n            ticker: coin,\n            interval: type\n        });\n        sendMessage(topicList);\n    }\n});\n\n// enable the button upon websocket connection\nserver.onopen = () => {\n    send.disabled = false;\n};\n\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\nserver.onmessage = event => {\n    console.log(\"reached onmessage\");\n    let message = JSON.parse(event.data);\n    console.log(message);\n    console.log(message.data);\n    ReactDOM.render(\n        <div>\n        <App\n            coin={message.ticker}\n            price={message.price}\n            history={message.data}\n        />\n        </div>,\n    document.getElementById('root'))\n};\n\n\n\n\n// TODO: abstract & export, make topicList a tuple (no duplicates)\n// function to be called when sending a message\nfunction sendMessage(topicList){\n    const toServer = {\n        action: 'establishKucoinWebsocket',\n        tickers: topicList\n    };\n    server.send(JSON.stringify(toServer));\n};\n \nfunction requestBulkPriceHistory(coin, interval) {\n    const toServer = {\n        action: 'bulkPriceHistory',\n        ticker: coin,\n        start: unixTime,\n        end: unixTime,\n        type: interval\n    };\n    server.send(JSON.stringify(toServer));\n}\n\nfunction endSession() {\n    const toServer = {\n        action: 'endAllSessions',\n        tickers: topicList\n    };\n    server.send(JSON.stringify(toServer));\n};\n"]},"metadata":{},"sourceType":"module"}