{"ast":null,"code":"var _jsxFileName = \"/Users/liamwhite/Documents/projects/node/websocket/client/src/index.js\";\nconst server = new WebSocket('ws://localhost:8080'); // const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx'; // easily identify input and button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst input = document.getElementById('message');\nconst startDatafeedButton = document.getElementById('send');\nconst endDatafeedButton = document.getElementById('end'); // to store subscribed datafeeds client-side\n\nlet topicList = []; // only enable button AFTER websocket connection hasbeen established\n\nstartDatafeedButton.disabled = true;\nendDatafeedButton.disabled = true; // do stuff on click\n\nstartDatafeedButton.addEventListener('click', () => {\n  topicList.push(input.value);\n  sendMessage(topicList);\n}, false);\nendDatafeedButton.addEventListener('click', endSession, false); // send message when 'enter' is clicked\n\ndocument.addEventListener('keyup', e => {\n  if (e.key === 'Enter') {\n    topicList.push(input.value);\n    sendMessage(topicList);\n  }\n}); // enable the button upon websocket connection\n\nserver.onopen = () => {\n  startDatafeedButton.disabled = false;\n  endDatafeedButton.disabled = false;\n};\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\n\nserver.onmessage = event => {\n  let message = JSON.parse(event.data);\n  console.log(message);\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      coin: message.ticker,\n      price: message.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this), document.getElementById('root'));\n}; // TODO: abstract & export\n// function to be called when sending a message\n\n\nfunction sendMessage(topicList) {\n  const toServer = {\n    action: 'establishKucoinWebsocket',\n    tickers: topicList\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;\n\nfunction endSession() {\n  const toServer = {\n    action: 'endAllSessions',\n    tickers: topicList\n  };\n  server.send(JSON.stringify(toServer));\n}\n\n;","map":{"version":3,"sources":["/Users/liamwhite/Documents/projects/node/websocket/client/src/index.js"],"names":["server","WebSocket","React","ReactDOM","App","input","document","getElementById","startDatafeedButton","endDatafeedButton","topicList","disabled","addEventListener","push","value","sendMessage","endSession","e","key","onopen","onmessage","event","message","JSON","parse","data","console","log","render","ticker","price","toServer","action","tickers","send","stringify"],"mappings":";AAAA,MAAMA,MAAM,GAAG,IAAIC,SAAJ,CAAc,qBAAd,CAAf,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CAEA;;;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACA,MAAMC,mBAAmB,GAAGF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B;AACA,MAAME,iBAAiB,GAAGH,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAA1B,C,CAEA;;AACA,IAAIG,SAAS,GAAG,EAAhB,C,CAEA;;AACAF,mBAAmB,CAACG,QAApB,GAA+B,IAA/B;AACAF,iBAAiB,CAACE,QAAlB,GAA6B,IAA7B,C,CAEA;;AACAH,mBAAmB,CAACI,gBAApB,CAAqC,OAArC,EAA8C,MAAM;AAChDF,EAAAA,SAAS,CAACG,IAAV,CAAeR,KAAK,CAACS,KAArB;AACAC,EAAAA,WAAW,CAACL,SAAD,CAAX;AACH,CAHD,EAGG,KAHH;AAIAD,iBAAiB,CAACG,gBAAlB,CAAmC,OAAnC,EAA4CI,UAA5C,EAAwD,KAAxD,E,CAEA;;AACAV,QAAQ,CAACM,gBAAT,CAA0B,OAA1B,EAAmCK,CAAC,IAAI;AACpC,MAAGA,CAAC,CAACC,GAAF,KAAU,OAAb,EAAqB;AACjBR,IAAAA,SAAS,CAACG,IAAV,CAAeR,KAAK,CAACS,KAArB;AACAC,IAAAA,WAAW,CAACL,SAAD,CAAX;AACH;AACJ,CALD,E,CAOA;;AACAV,MAAM,CAACmB,MAAP,GAAgB,MAAM;AAClBX,EAAAA,mBAAmB,CAACG,QAApB,GAA+B,KAA/B;AACAF,EAAAA,iBAAiB,CAACE,QAAlB,GAA6B,KAA7B;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AAEAX,MAAM,CAACoB,SAAP,GAAmBC,KAAK,IAAI;AACxB,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAnB,EAAAA,QAAQ,CAACyB,MAAT,eACA;AAAA,2BACA,QAAC,GAAD;AACI,MAAA,IAAI,EAAEN,OAAO,CAACO,MADlB;AAEI,MAAA,KAAK,EAAEP,OAAO,CAACQ;AAFnB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADA,EAOAxB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPA;AAQH,CAXD,C,CAgBA;AACA;;;AACA,SAASQ,WAAT,CAAqBL,SAArB,EAA+B;AAC3B,QAAMqB,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAE,0BADK;AAEbC,IAAAA,OAAO,EAAEvB;AAFI,GAAjB;AAIAV,EAAAA,MAAM,CAACkC,IAAP,CAAYX,IAAI,CAACY,SAAL,CAAeJ,QAAf,CAAZ;AACH;;AAAA;;AAED,SAASf,UAAT,GAAsB;AAClB,QAAMe,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAE,gBADK;AAEbC,IAAAA,OAAO,EAAEvB;AAFI,GAAjB;AAIAV,EAAAA,MAAM,CAACkC,IAAP,CAAYX,IAAI,CAACY,SAAL,CAAeJ,QAAf,CAAZ;AACH;;AAAA","sourcesContent":["const server = new WebSocket('ws://localhost:8080');\n// const server = new WebSocket('wss://dhmcvxkisb.execute-api.us-east-2.amazonaws.com/dev')\nimport React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App.jsx';\n\n// easily identify input and button\nconst input = document.getElementById('message')\nconst startDatafeedButton = document.getElementById('send')\nconst endDatafeedButton = document.getElementById('end')\n\n// to store subscribed datafeeds client-side\nlet topicList = [];\n\n// only enable button AFTER websocket connection hasbeen established\nstartDatafeedButton.disabled = true;\nendDatafeedButton.disabled = true;\n\n// do stuff on click\nstartDatafeedButton.addEventListener('click', () => {\n    topicList.push(input.value);\n    sendMessage(topicList);\n}, false);\nendDatafeedButton.addEventListener('click', endSession, false);\n\n// send message when 'enter' is clicked\ndocument.addEventListener('keyup', e => {\n    if(e.key === 'Enter'){\n        topicList.push(input.value);\n        sendMessage(topicList);\n    }\n})\n\n// enable the button upon websocket connection\nserver.onopen = () => {\n    startDatafeedButton.disabled = false;\n    endDatafeedButton.disabled = false;\n};\n\n/*\nwhen websocket client receives message (i.e. ticker & price info),\ntransform the string into an object with the imported function and\npass as props into the <App /> component\n*/\n\nserver.onmessage = event => {\n    let message = JSON.parse(event.data);\n    console.log(message);\n    ReactDOM.render(\n    <div>\n    <App\n        coin={message.ticker}\n        price={message.price}\n    />\n    </div>,\n    document.getElementById('root'))\n};\n\n\n\n\n// TODO: abstract & export\n// function to be called when sending a message\nfunction sendMessage(topicList){\n    const toServer = {\n        action: 'establishKucoinWebsocket',\n        tickers: topicList\n    };\n    server.send(JSON.stringify(toServer));\n};\n\nfunction endSession() {\n    const toServer = {\n        action: 'endAllSessions',\n        tickers: topicList\n    };\n    server.send(JSON.stringify(toServer));\n};\n"]},"metadata":{},"sourceType":"module"}